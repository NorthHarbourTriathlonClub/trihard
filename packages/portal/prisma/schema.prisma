datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model TrainingSession {
  id                        String                     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                 DateTime                   @default(now())
  createdBy                 String?
  updatedAt                 DateTime                   @updatedAt
  updatedBy                 String?
  archived                  Boolean                    @default(false)
  archivedAt                DateTime?
  startTime                 DateTime
  finishTime                DateTime?
  coachFullName             String
  type                      String
  location                  String
  details                   String?
  athleteIds                String[]                   @db.ObjectId
  athletes                  Athlete[]                  @relation(fields: [athleteIds], references: [id])
  concessionCardIds         String[]                   @db.ObjectId
  concessionCards           ConcessionCard[]           @relation(fields: [concessionCardIds], references: [id])
  individualSessionPayments IndividualSessionPayment[]
}

model Athlete {
  id                          String                    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                   DateTime                  @default(now())
  createdBy                   String?
  updatedAt                   DateTime                  @updatedAt
  updatedBy                   String?
  archived                    Boolean                   @default(false)
  archivedAt                  DateTime?
  firstName                   String
  lastName                    String
  preferredName               String?
  email                       String
  mobile                      String?
  trainingSessionsAttendedIds String[]                  @db.ObjectId
  trainingSessionsAttended    TrainingSession[]         @relation(fields: [trainingSessionsAttendedIds], references: [id])
  concessionCards             ConcessionCard[]
  individualSessionPayments   IndividualSessionPayment?
}

model ConcessionCard {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime          @default(now())
  createdBy             String?
  updatedAt             DateTime          @updatedAt
  updatedBy             String?
  archived              Boolean           @default(false)
  archivedAt            DateTime?
  cardNumber            Int
  paymentAmount         Float
  paymentMethod         String
  numTrainingsAvailable Int
  issuanceDate          DateTime
  expiryDate            DateTime
  issuedBy              String
  athleteId             String            @db.ObjectId
  athlete               Athlete           @relation(fields: [athleteId], references: [id])
  trainingSessionIds    String[]          @db.ObjectId
  trainingSessions      TrainingSession[] @relation(fields: [trainingSessionIds], references: [id])
}

model IndividualSessionPayment {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime        @default(now())
  createdBy         String?
  updatedAt         DateTime        @updatedAt
  updatedBy         String?
  archived          Boolean         @default(false)
  archivedAt        DateTime?
  athleteId         String          @unique @db.ObjectId
  athlete           Athlete         @relation(fields: [athleteId], references: [id])
  paymentAmount     Float
  paymentMethod     String
  isPaid            Boolean         @default(false)
  trainingSessionId String          @db.ObjectId
  trainingSession   TrainingSession @relation(fields: [trainingSessionId], references: [id])
}
